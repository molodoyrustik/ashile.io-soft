{"version":3,"file":null,"sources":["../src/config/index.js","../src/models/Log/LogSchema.js","../src/models/Domain/DomainSchema.js","../src/models/Channel/ChannelSchema.js","../src/models/User/User.js","../src/models/Token/Token.js","../src/models/Domain/Domain.js","../src/models/Log/Log.js","../src/models/Channel/Channel.js","../src/models/Rate/Rate.js","../src/models/index.js","../src/utils/Nodemailer/index.js","../src/utils/index.js","../src/App.js","../src/index.js"],"sourcesContent":["global.__DEV__ = true;\n// __STAGE__\nglobal.__PROD__ = false;\n\nexport default {\n  name: 'Your super app',\n  port: 3001,\n  db: {\n    url: 'mongodb://localhost/test',\n  },\n  jwt: {\n    secret: 'YOUR_SECRET',\n  },\n  nodemailer: {\n    service: 'mail',\n    host: 'smtp.mail.ru',\n    auth: {\n      user: 'molodoyrustik@mail.ru',\n      pass: 'molodoy'\n    }\n  },\n};\n","import mongoose from 'mongoose'\n\nconst LogSchema = new mongoose.Schema({\n  id: {\n    type: String,\n    trim: true,\n  },\n  flag: {\n    type: Boolean,\n  },\n  status: {\n    type: String,\n    trimg: true,\n  },\n  statusText: {\n    type: String,\n    trimg: true,\n  },\n  time: {\n    type: Number,\n  }\n})\n\nexport default LogSchema\n","import _ from 'lodash'\nimport mongoose from 'mongoose'\n\nimport LogSchema from '../Log/LogSchema';\n\nconst DomainSchema = new mongoose.Schema({\n  id: {\n    type: String,\n    trim: true,\n  },\n  url: {\n    type: String,\n    trim: true,\n  },\n  channels: [],\n  logs: [LogSchema],\n})\n\nexport default DomainSchema\n","import _ from 'lodash'\nimport mongoose from 'mongoose'\n\nconst ChannelSchema = new mongoose.Schema({\n  id: {\n    type: String,\n    trim: true,\n  },\n  type: {\n    type: String,\n    trim: true,\n  },\n  endpoint: {\n    type: String,\n    trim: true,\n  }\n})\n\nexport default ChannelSchema;\n","import _ from 'lodash'\nimport jwt from 'jsonwebtoken'\nimport bcrypt from 'bcryptjs'\nimport Promise from 'bluebird'\nconst bcryptGenSalt = Promise.promisify(bcrypt.genSalt)\nconst bcryptHash = Promise.promisify(bcrypt.hash)\nconst bcryptCompare = Promise.promisify(bcrypt.compare)\nimport mongoose from 'mongoose'\nimport uniqid from 'uniqid';\n\nimport DomainSchema from '../Domain/DomainSchema';\nimport ChannelSchema from '../Channel/ChannelSchema';\n\nexport default (ctx) => {\n  if (!ctx.log) throw '!log'\n\n  const schema = new mongoose.Schema({\n    email: {\n      type: String,\n      required: true,\n      trim: true,\n    },\n    id: {\n      type: String,\n      trim: true,\n    },\n    password: {\n      type: String,\n    },\n    domains: [DomainSchema],\n    channels: [ChannelSchema],\n  }, {\n    collection: 'user',\n    timestamps: true,\n  })\n\n  schema.statics.isValidEmail = function (email) {\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email)\n  }\n  schema.statics.generatePassword = function (length = 10) {\n    return Math.random().toString(36).substr(2, length)\n  }\n  schema.methods.toJSON = function () {\n    return _.omit(this.toObject(), ['password'])\n  }\n  schema.methods.getIdentity = function (params) {\n    const object = _.pick(this.toObject(), ['_id', 'email', 'id'])\n    if (!params) return object\n    return Object.assign(object, params)\n  }\n  schema.methods.generateAuthToken = function (params) {\n    return jwt.sign(this.getIdentity(params), ctx.config.jwt.secret)\n  }\n  schema.methods.verifyPassword = async function (password) {\n    return await bcryptCompare(password, this.password)\n  }\n\n  const SALT_WORK_FACTOR = 10\n  schema.pre('save', function (next) {\n    if (!this.isModified('password')) return next();\n    return bcryptGenSalt(SALT_WORK_FACTOR)\n    .then(salt => {\n      bcryptHash(this.password, salt)\n      .then(hash => {\n        this.password = hash\n        next();\n      })\n    })\n    .catch(next)\n  });\n\n  return mongoose.model('User', schema);\n}\n","import mongoose from 'mongoose'\n\nexport default (ctx) => {\n  if (!ctx.log) throw '!log'\n\n  const schema = new mongoose.Schema({\n    id: {\n      type: String,\n      trim: true,\n    },\n    userID: {\n      type: String,\n      trim: true,\n    },\n    forgotEmailToken: {\n      type: String,\n      trim: true,\n    },\n  }, {\n    collection: 'token',\n    timestamps: true,\n  })\n\n  return mongoose.model('Token', schema);\n}\n","import mongoose from 'mongoose'\nimport DomainSchema from './DomainSchema';\n\nexport default (ctx) => {\n  if (!ctx.log) throw '!log'\n\n  return  mongoose.model('Domain', DomainSchema);\n}\n","import mongoose from 'mongoose'\r\nimport LogSchema from './LogSchema';\r\n\r\nexport default (ctx) => {\r\n  if (!ctx.log) throw '!log'\r\n\r\n  return  mongoose.model('Log', LogSchema);\r\n}\r\n","import mongoose from 'mongoose'\nimport ChannelSchema from './ChannelSchema';\n\nexport default (ctx) => {\n  if (!ctx.log) throw '!log'\n\n  return  mongoose.model('Channel', ChannelSchema);\n}\n","import _ from 'lodash'\nimport uniqid from 'uniqid';\nimport mongoose from 'mongoose';\n\n\nexport default (ctx) => {\n  if (!ctx.log) throw '!log'\n\n  const schema = new mongoose.Schema({\n    id: {\n      type: String,\n      trim: true,\n    },\n    name: {\n      type: String,\n      trim: true,\n    },\n    maxDomains: {\n      type: Number,\n    },\n    maxChannels: {\n      type: Number,\n    },\n  }, {\n    collection: 'rate',\n    timestamps: true,\n  })\n\n  return  mongoose.model('Rate', schema);\n}\n","import User from './User/User';\nimport Token from './Token/Token';\nimport DomainSchema from './Domain/DomainSchema';\nimport LogSchema from './Log/LogSchema';\nimport Domain from './Domain/Domain';\nimport Log from './Log/Log';\nimport Channel from './Channel/Channel';\nimport Rate from './Rate/Rate';\n\nexport default function () {\n  return {\n    Domain: Domain(...arguments),\n    Log: Log(...arguments),\n    Rate: Rate(...arguments),\n    User: User(...arguments),\n    Token: Token(...arguments),\n    Channel: Channel(...arguments),\n    scheme: {\n      DomainSchema,\n      LogSchema,\n    }\n  }\n}\n","import nodemailer from 'nodemailer';\nimport smtpTransport from 'nodemailer-smtp-transport';\n\nexport default (ctx) => {\n  if (!ctx.log) throw '!log'\n\n  const transporter = nodemailer.createTransport(smtpTransport(ctx.config.nodemailer));\n\n  return  transporter;\n}\n","import Transporter from './Nodemailer/index';\n\nexport default function () {\n  return {\n    Transporter: Transporter(...arguments),\n  }\n}\n","import bunyan from 'bunyan';\nimport mongoose from 'mongoose';\nimport axios from 'axios';\nimport uniqid from 'uniqid';\n\nimport getModels from './models/index';\nimport getUtils from './utils/index';\n\n\nexport default class App {\n  constructor(params = {}) {\n    Object.assign(this, params);\n    if (!this.log) this.log = this.getLogger();\n    this.init();\n  }\n\n  getLogger(params) {\n    return bunyan.createLogger(Object.assign({\n      name: 'app',\n      src: __DEV__,\n      level: 'trace',\n    }, params))\n  }\n\n  getModels() {\n    return getModels(this);\n  }\n\n  getDatabase() {\n    return {\n      run: () => {\n        new Promise((resolve) => {\n          mongoose.connect(this.config.db.url);\n          resolve();\n        });\n      }\n    }\n  }\n\n  getUtils() {\n    return getUtils(this);\n  }\n\n  init() {\n    this.log.trace('App init');\n    this.db = this.getDatabase();\n\n    this.utils = this.getUtils();\n    this.log.trace('utils', Object.keys(this.utils));\n\n    this.models = this.getModels();\n    this.log.trace('models', Object.keys(this.models));\n  }\n\n  async startMonit() {\n    const User = this.models.User;\n    const Log = this.models.Log;\n    const users = await User.find({});\n    for (let i = 0; i < users.length; i++) {\n     for(let j = 0; j < users[i].domains.length; j++) {\n        const { url, channels } = users[i].domains[j]\n        const channelID = channels[0];\n        const channel = users[i].channels.filter((element, index) => {\n          return element.id === channelID;\n        })[0];\n        try {\n          const res = await axios.get(url);\n          const { status, statusText } = res;\n          console.log(url, res.status, res.statusText);\n          const flag = res.status === 200 ? true : false;\n          const log = new Log({ id: uniqid(), flag, status, statusText, time: (new Date()).getTime() })\n          users[i].domains[j].logs.push(log)\n          users[i].save();\n        } catch (err) {\n          let mailText = ``;\n          if(err.response) {\n            const res = err.response;\n            const { status, statusText } = res;\n            mailText = `Запрос на сайт ${url} дал плохой ответ: ${status} ${statusText}`;\n            console.log(url, res.status, res.statusText);\n            const flag = false;\n            const log = new Log({ id: uniqid(), flag, status, statusText, time: (new Date()).getTime() })\n            users[i].domains[j].logs.push(log)\n            users[i].save();\n          } else {\n            const status = 500;\n            const statusText = 'Server Error';\n            console.log(url, status, statusText);\n            mailText = `Запрос на сайт ${url} дал плохой ответ: ${status} ${statusText}`;\n            const flag = false;\n            const log = new Log({ id: uniqid(), flag, status, statusText, time: (new Date()).getTime() })\n            users[i].domains[j].logs.push(log)\n            users[i].save();\n          }\n\n          const transporter = this.utils.Transporter;\n          const { endpoint } = channel;\n          var mailOptions = {\n            from: 'molodoyrustik@mail.ru',\n            to: endpoint,\n            subject: 'Уведомление с сайта Ashile.io',\n            text: mailText\n          };\n          transporter.sendMail(mailOptions);\n        }\n     }\n    }\n  }\n\n  async run() {\n    this.log.trace('App run');\n    try {\n      await this.db.run();\n    } catch (err) {\n      this.log.fatal(err);\n    }\n    return new Promise((resolve) => {\n      setInterval(() => {\n        this.startMonit();\n      }, 60000)\n    });\n  }\n}\n","import config from './config/index';\nimport App from './App';\n\nconst app = new App({ config });\napp.run();\n"],"names":["global","__DEV__","__PROD__","LogSchema","mongoose","Schema","String","Boolean","Number","DomainSchema","ChannelSchema","bcryptGenSalt","Promise","promisify","bcrypt","genSalt","bcryptHash","hash","bcryptCompare","compare","ctx","log","schema","statics","isValidEmail","email","re","test","generatePassword","length","Math","random","toString","substr","methods","toJSON","_","omit","toObject","getIdentity","params","object","pick","generateAuthToken","jwt","sign","config","secret","verifyPassword","password","SALT_WORK_FACTOR","pre","next","isModified","then","salt","catch","model","Domain","arguments","Log","Rate","User","Token","Channel","transporter","nodemailer","createTransport","smtpTransport","Transporter","App","getLogger","init","bunyan","createLogger","getModels","resolve","connect","db","url","getUtils","trace","getDatabase","utils","models","find","i","users","j","domains","channels","filter","element","index","id","channelID","axios","get","res","status","statusText","uniqid","flag","time","Date","getTime","logs","push","save","response","channel","endpoint","mailText","sendMail","mailOptions","run","fatal","startMonit","app"],"mappings":"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"}